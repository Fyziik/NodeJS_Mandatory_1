<!-- head component -->
<%- include('../partials/head') %>

<!-- Header -->
<%- include('../partials/header') %>

<!-- Content -->
<div class="row" id="content"">
    <!-- Sidebar partial -->
    <%- include('../partials/sidebar') %>
    <!-- The "meat" of the pages -->
    <div class="col">
      <div>

        <h1 style="margin-left: 31.5%;">Session two</h1>
      
        <h1>APIs <button type="button" class="btn btn-primary" id="APIButton">Show</button></h1>
        
        <div id="APISection" class="contentSection" hidden>
          <div class="sessionContent">
            <h2>What's a RESTful API</h2>
            <p>An RESTful API is an API which follows the principles of REST, which consists of:</p>
            <!-- TODO insert picture 'RESTfulAPICheclist.png' -->
            <img src="/imgs/RESTfulAPIChecklist.PNG" alt="">
          </div>
  
          <div class="sessionContent">
            <h2>RESTful APIs philosophy</h2>
            <!-- TODO insert picture 'APIPhilosophy.png' -->
            <img src="/imgs/APIPhilosophy.PNG" alt="">
            <p>Basically, a RESTful API should have endpoints of which makes sense, for instance, 
              if we hit /users with a HTTP GET, we’d expect to retrieve a list of users. 
              Or if we hit /users/id with a HTTP DELETE, we’d expect to be able to delete a specific user by an id.</p>
          </div>
  
          <div class="sessionContent">
            <h2>How to design a fully CRUD RESTful API</h2>
            <!-- TODO insert picture APIDesign.png -->
            <img src="/imgs/APIDesign.png" alt="">
            <p>We can use an excel spreadsheet or any textual editor for the creation of the endpoints for a RESTful API. 
              Here we can see what the different endpoints would result in, for instance would the endpoint /users 
              as a HTTP GET retrieve a list of all the users.</p>
          </div>
        </div>
        

        <h1>Functions <button type="button" class="btn btn-primary" id="FunctionsButton">Show</button></h1>

        <div id="FunctionsSection" class="contentSection" hidden>
          <div class="sessionContent">
            <h2>Hoisting</h2>
            <p>
              Javascript "loads" the entire file before executing, which means you can call functions early in the file, 
              even though they're not defined at that point, so it sorta "understands the future", I suppose. 
              Only works on specific keywords, such as function. Won't work on const or let etc.
            </p>
          </div>
          
          <div class="sessionContent">
            <h2>Regular function</h2>
            <img src="/imgs/regularFunction.png" alt="">
          </div>

          <div class="sessionContent">
            <h2>Variable function / Anonymous function</h2>
            <img src="/imgs/anonymousFunction.png" alt="">
          </div>

          <div class="sessionContent">
            <h2>Arrow function</h2>
            <img src="/imgs/arrowFunction.png" alt="">
          </div>

          <div class="sessionContent">
            <h2>Callback function</h2>
            <img src="/imgs/callbackFunction.png" alt="">
          </div>
        </div>
        

      </div>
    </div>
</div>

<!-- Have to include Jquery link here, and not in footer, since Jquery has to be loaded before assigning $ values 
     Could fix this by making an "end.ejs" file with only the body & html end tags, and a seperate .ejs file
     for script insertions -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>

<script>
  $(function() {

    let APIHidden = true
    let FunctionsHidden = true

    $("#APIButton").click(function() {
      if (APIHidden) {
        // Toggle hidden class and make visible, then change button text
        $("#APISection").removeAttr('hidden')
        $("#APIButton").text("Hide")
      } else { //Else give it the hidden attribute and change button text
        $("#APISection").attr('hidden', true)
        $("#APIButton").text("Show")
      }
      //Toggle boolean of hidden to the opposite
      APIHidden = !APIHidden
    })

    $("#FunctionsButton").click(function() {
      if (FunctionsHidden) {
        $("#FunctionsSection").removeAttr('hidden')
        $("#FunctionsButton").text("Hide")
      } else {
        $("#FunctionsSection").attr('hidden', true)
        $("#FunctionsButton").text("Show")
      }
      FunctionsHidden = !FunctionsHidden
    })

  })
 
</script>

<!-- Footer Component -->
<%- include('../partials/footer') %>